name: 'Pull requests compile checks'
on:
  pull_request:
    # Only trigger if there is a code change or a CMake change that (could) affect code
    paths:
      - '**.c'
      - '**.h'
      - 'CMakeLists.txt'
      - 'cmake/*'
  workflow_dispatch:

jobs:
  # Sanity check for compilation using older compiler on CentOS 7
  pr-compile-centos-7:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout Fluent Bit code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Attempt to build current source for CentOS 7
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./dockerfiles/Dockerfile.centos7
        # No need to use after this so discard completely
        push: false
        load: false
        provenance: false

  # Sanity check for compilation using system libraries
  pr-compile-system-libs:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        flb_option:
          - "-DFLB_PREFER_SYSTEM_LIBS=On"
        cmake_version:
          - "3.31.6"
        compiler:
          - gcc:
            cc: gcc
            cxx: g++
          - clang:
            cc: clang
            cxx: clang++
    steps:
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gcc-9 g++-9 clang-12 libsystemd-dev gcovr libyaml-dev
          sudo ln -s /usr/bin/llvm-symbolizer-12 /usr/bin/llvm-symbolizer || true

      - name: Install system libraries for this test
        run: |
          sudo apt-get update
          sudo apt-get install -y libc-ares-dev libjemalloc-dev libluajit-5.1-dev \
            libnghttp2-dev libsqlite3-dev libzstd-dev
          mkdir -p /tmp/libbacktrace/build && \
            curl -L https://github.com/ianlancetaylor/libbacktrace/archive/8602fda.tar.gz | \
            tar --strip-components=1 -xzC /tmp/libbacktrace/ && \
            pushd /tmp/libbacktrace/build && ../configure && make && sudo make install && popd

      - name: Install cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "${{ matrix.cmake_version }}"

      - name: Checkout Fluent Bit code
        uses: actions/checkout@v4

      - name: ${{ matrix.compiler.cc }} & ${{ matrix.compiler.cxx }} - ${{ matrix.flb_option }}
        run: |
          export nparallel=$(( $(getconf _NPROCESSORS_ONLN) > 8 ? 8 : $(getconf _NPROCESSORS_ONLN) ))
          echo "CC = $CC, CXX = $CXX, FLB_OPT = $FLB_OPT"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 90
          cmake $GLOBAL_OPTS $FLB_OPT  ../
          make -j $nparallel
        working-directory: build
        env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
          FLB_OPT: ${{ matrix.flb_option }}
          GLOBAL_OPTS: "-DFLB_JEMALLOC=On -DFLB_SHARED_LIB=Off -DFLB_DEBUG=On -DFLB_ALL=On -DFLB_EXAMPLES=Off"

      - name: Display dependencies w/ ldd
        run: |
          export ldd_result=$(ldd ./bin/fluent-bit)
          echo "ldd result:"
          echo "$ldd_result"
          echo "$ldd_result" | grep libcares
          echo "$ldd_result" | grep libjemalloc
          echo "$ldd_result" | grep libluajit
          echo "$ldd_result" | grep libnghttp2
          echo "$ldd_result" | grep libsqlite3
          echo "$ldd_result" | grep libzstd
        working-directory: build

  pr-compile-qemu-aarch64-linux:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64
    steps:
      - name: Checkout Fluent Bit code
        uses: actions/checkout@v4

      - name: Prepare and build with QEMU ${{ matrix.arch }}
        uses: uraimo/run-on-arch-action@v2
        id: build-and-test-on-qemu
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          shell: /bin/bash
          dockerRunArgs: |
            --volume "/var/lib/dbus/machine-id:/var/lib/dbus/machine-id"
            --volume "/etc/machine-id:/etc/machine-id"
          install: |
            apt-get update
            apt-get install -y gcc-7 g++-7 clang-6.0 libyaml-dev cmake flex bison libssl-dev #libsystemd-dev
            ln -s /usr/bin/llvm-symbolizer-6.0 /usr/bin/llvm-symbolizer || true

            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 90
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 90
            update-alternatives --install /usr/bin/clang clang /usr/bin/clang-6.0 90
          run: |
            cd build
            export nparallel=$(( $(getconf _NPROCESSORS_ONLN) > 8 ? 8 : $(getconf _NPROCESSORS_ONLN) ))
            export FLB_OPTION="-DFLB_WITHOUT_flb-it-network=1 -DFLB_WITHOUT_flb-it-fstore=1"
            export FLB_OMIT_OPTION="-DFLB_WITHOUT_flb-it-utils=1 -DFLB_WITHOUT_flb-it-pack=1"
            export GLOBAL_OPTION="-DFLB_BACKTRACE=Off -DFLB_SHARED_LIB=Off -DFLB_DEBUG=On -DFLB_ALL=On -DFLB_EXAMPLES=Off"
            export FLB_UNIT_TEST_OPTION="-DFLB_TESTS_INTERNAL=On"
            export FLB_OPT="${FLB_OPTION} ${GLOBAL_OPTION} ${FLB_UNIT_TEST_OPTION} ${FLB_OMIT_OPTION}"

            echo "CC = gcc, CXX = gcc, FLB_OPT = $FLB_OPT"

            cmake ${FLB_OPT}  ../
            make -j $nparallel
            ctest -j $nparallel --build-run-dir . --output-on-failure
